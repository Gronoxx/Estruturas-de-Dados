C7.c 

1.  A posição em que a linha 10 do código deseja escrever ‘\0’ é inválida, pois o tamanho é 26, ou seja vai de 0 ao 25, tornando a tentativa de escrever na posição alphabet + 26 inválida 

2.  Com o debbuger foi possível observar que foi escrito:  

alphabet: 0x5555555592a0 “ABCDEFGHIJKLMNOPQRSTUVWXYZ”  

E posteriormente, não há como acrescentar na posição alphabet + 26 o ‘\0’. 

O valgrind envia a seguinte mensagem: 

==8812== Memcheck, a memory error detector 

==8812== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==8812== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==8812== Command: ./programa7 

==8812==  

==8812== Invalid write of size 1 

==8812==    at 0x109282: main (in /mnt/d/Tarefa Prática 3/Código Original/programa7) 

==8812==  Address 0x4a8e0fa is 0 bytes after a block of size 26 alloc'd 

==8812==    at 0x484DA83: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==8812==    by 0x109249: main (in /mnt/d/Tarefa Prática 3/Código Original/programa7) 

==8812==  

==8812==  

==8812== HEAP SUMMARY: 

==8812==     in use at exit: 0 bytes in 0 blocks 

==8812==   total heap usage: 2 allocs, 2 frees, 8,314 bytes allocated 

==8812==  

==8812== All heap blocks were freed -- no leaks are possible 

==8812==  

==8812== For lists of detected and suppressed errors, rerun with: -s 

==8812== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0) 

Podemos observar que: 

==8812== Invalid write of size 1 

==8812==  Address 0x4a8e0fa is 0 bytes after a block of size 26 alloc'd 

Essas duas mensagens representam perfeitamente nossa hipótese do item 1 

3.  Portanto irei aumentar o tamanho do calloc em 1 sizeof(char) 

4.  Após aumentar em um o tamanho, ou seja, passar para 27, o valgrind retornou: 

==8967== Memcheck, a memory error detector 

==8967== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==8967== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==8967== Command: ./programa_reparado7 

==8967==  

==8967==  

==8967== HEAP SUMMARY: 

==8967==     in use at exit: 0 bytes in 0 blocks 

==8967==   total heap usage: 1 allocs, 1 frees, 27 bytes allocated 

==8967==  

==8967== All heap blocks were freed -- no leaks are possible 

==8967==  

==8967== For lists of detected and suppressed errors, rerun with: -s 

==8967== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

Sem nenhum erro como esperado. 

O debugger apesar de auxiliar não consegue ser tão claro como o vlagrind, pois \0 não é algo tão visual. 