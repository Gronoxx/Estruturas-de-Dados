C5.c 

1.O erro desse código é não liberar o malloc da linha 9. 

2.Vamos ver se o valgrind detecta esse suposto vazamento: 

==7507== Memcheck, a memory error detector 

==7507== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==7507== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==7507== Command: ./programa5 

==7507==  

intArray[742]: 742 

==7507==  

==7507== Process terminating with default action of signal 27 (SIGPROF) 

==7507==    at 0x497ABCA: __open_nocancel (open64_nocancel.c:39) 

==7507==    by 0x498971F: write_gmon (gmon.c:370) 

==7507==    by 0x4989F8E: _mcleanup (gmon.c:444) 

==7507==    by 0x48A6494: __run_exit_handlers (exit.c:113) 

==7507==    by 0x48A660F: exit (exit.c:143) 

==7507==    by 0x488AD96: (below main) (libc_start_call_main.h:74) 

==7507==  

==7507== HEAP SUMMARY: 

==7507==     in use at exit: 13,592 bytes in 3 blocks 

==7507==   total heap usage: 3 allocs, 0 frees, 13,592 bytes allocated 

==7507==  

==7507== LEAK SUMMARY: 

==7507==    definitely lost: 4,000 bytes in 1 blocks 

==7507==    indirectly lost: 0 bytes in 0 blocks 

==7507==      possibly lost: 0 bytes in 0 blocks 

==7507==    still reachable: 9,592 bytes in 2 blocks 

==7507==         suppressed: 0 bytes in 0 blocks 

==7507== Rerun with --leak-check=full to see details of leaked memory 

==7507==  

==7507== For lists of detected and suppressed errors, rerun with: -s 

==7507== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

Profiling timer expired 

Essa mensagem do Valgrind foi intrigante, pois não conseguia identificar esses 3 blocos de alocação e quais eram os dois blocos que ainda eram alcançáveis. Além da mensagem de que excedeu o tempo limite para rodar o código. 

Então usei o –leak-check=full 

==7569== Memcheck, a memory error detector 

==7569== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==7569== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==7569== Command: ./programa5 

==7569==  

intArray[418]: 418 

==7569==  

==7569== HEAP SUMMARY: 

==7569==     in use at exit: 4,000 bytes in 1 blocks 

==7569==   total heap usage: 3 allocs, 2 frees, 13,592 bytes allocated 

==7569==  

==7569== 4,000 bytes in 1 blocks are definitely lost in loss record 1 of 1 

==7569==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==7569==    by 0x1092AD: main (in /mnt/d/Tarefa Prática 3/Código Original/programa5) 

==7569==  

==7569== LEAK SUMMARY: 

==7569==    definitely lost: 4,000 bytes in 1 blocks 

==7569==    indirectly lost: 0 bytes in 0 blocks 

==7569==      possibly lost: 0 bytes in 0 blocks 

==7569==    still reachable: 0 bytes in 0 blocks 

==7569==         suppressed: 0 bytes in 0 blocks 

==7569==  

==7569== For lists of detected and suppressed errors, rerun with: -s 

==7569== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0) 

Após receber essa nova mensagem do valgrind fui capaz de perceber que meu foco deveria ser no novo LEAK SUMMARY e nos 4000 bytes definitivamente perdidos que se mantiveram. Percebi que 4000 bytes era o tamanho exato do malloc que eu possuía suspeitas no item 1. 

3.Adicionarei um free para o malloc da linha 9( intArray). 

4.Após adicionar o free para o intArray, recebi a seguinte mensagem do valgrind: 

==7847== Memcheck, a memory error detector 

==7847== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==7847== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==7847== Command: ./programa_reparado5 

==7847==  

intArray[960]: 960 

==7847==  

==7847== HEAP SUMMARY: 

==7847==     in use at exit: 0 bytes in 0 blocks 

==7847==   total heap usage: 3 allocs, 3 frees, 13,688 bytes allocated 

==7847==  

==7847== All heap blocks were freed -- no leaks are possible 

==7847==  

==7847== For lists of detected and suppressed errors, rerun with: -s 

==7847== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

Portanto, o problema foi selecionado e os outros blocos que causaram confusão possivelmente são da função de geração de número aleatória, a qual desconheço o funcionamento. 