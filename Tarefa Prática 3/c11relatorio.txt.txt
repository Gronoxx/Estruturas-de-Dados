 
C11.c

1.  O código possui aparentemente dois erros graves: disponibilizando apenas 8 espaços de memória, sendo que seriam necessário pelo menos 10 (9 para os caracteres + 1 de terminação), além disso não há free para desalocar. 

2.  Ao tentar compilar o programa recebemos a seguinte mensagem: 

c11.c: In function ‘main’: 

c11.c:9:9: warning: ‘__builtin_memcpy’ writing 10 bytes into a region of size 8 overflows the destination [-Wstringop-overflow=] 

    9 |         strcpy(msg, "Holberton"); 

      |         ^~~~~~~~~~~~~~~~~~~~~~~~ 

c11.c:8:21: note: destination object of size 8 allocated by ‘malloc’ 

    8 |         char *msg = malloc(8); 

      |                      

Ou seja, nesse caso nem foi necessário o debugger ou o valgrind para nos apontar o erro. 

Com o valgrind: 

==5467== Memcheck, a memory error detector 

==5467== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==5467== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==5467== Command: ./programa11 

==5467==  

==5467== Invalid write of size 2 

==5467==    at 0x1091B4: main (c11.c:9) 

==5467==  Address 0x4a8c048 is 0 bytes after a block of size 8 alloc'd 

==5467==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==5467==    by 0x10919E: main (c11.c:8) 

==5467==  

==5467== Invalid read of size 1 

==5467==    at 0x484ED24: strlen (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==5467==    by 0x48D7DB0: __vfprintf_internal (vfprintf-internal.c:1517) 

==5467==    by 0x48C181E: printf (printf.c:33) 

==5467==    by 0x1091E2: main (c11.c:11) 

==5467==  Address 0x4a8c048 is 0 bytes after a block of size 8 alloc'd 

==5467==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==5467==    by 0x10919E: main (c11.c:8) 

==5467==  

==5467== Invalid read of size 1 

==5467==    at 0x48EC7B4: _IO_new_file_xsputn (fileops.c:1218) 

==5467==    by 0x48EC7B4: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1196) 

==5467==    by 0x48D808B: outstring_func (vfprintf-internal.c:239) 

==5467==    by 0x48D808B: __vfprintf_internal (vfprintf-internal.c:1517) 

==5467==    by 0x48C181E: printf (printf.c:33) 

==5467==    by 0x1091E2: main (c11.c:11) 

==5467==  Address 0x4a8c048 is 0 bytes after a block of size 8 alloc'd 

==5467==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==5467==    by 0x10919E: main (c11.c:8) 

==5467==  

==5467== Invalid read of size 1 

==5467==    at 0x48534C8: mempcpy (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==5467==    by 0x48EC6E4: _IO_new_file_xsputn (fileops.c:1235) 

==5467==    by 0x48EC6E4: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1196) 

==5467==    by 0x48D808B: outstring_func (vfprintf-internal.c:239) 

==5467==    by 0x48D808B: __vfprintf_internal (vfprintf-internal.c:1517) 

==5467==    by 0x48C181E: printf (printf.c:33) 

==5467==    by 0x1091E2: main (c11.c:11) 

==5467==  Address 0x4a8c048 is 0 bytes after a block of size 8 alloc'd 

==5467==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==5467==    by 0x10919E: main (c11.c:8) 

==5467==  

5467, Rolberton 

==5467==  

==5467== HEAP SUMMARY: 

==5467==     in use at exit: 8 bytes in 1 blocks 

==5467==   total heap usage: 2 allocs, 1 frees, 1,032 bytes allocated 

==5467==  

==5467== LEAK SUMMARY: 

==5467==    definitely lost: 8 bytes in 1 blocks 

==5467==    indirectly lost: 0 bytes in 0 blocks 

==5467==      possibly lost: 0 bytes in 0 blocks 

==5467==    still reachable: 0 bytes in 0 blocks 

==5467==         suppressed: 0 bytes in 0 blocks 

==5467== Rerun with --leak-check=full to see details of leaked memory 

==5467==  

==5467== For lists of detected and suppressed errors, rerun with: -s 

==5467== ERROR SUMMARY: 6 errors from 4 contexts (suppressed: 0 from 0) 

Percebemos que de fato há perda de memória e que há tentativas inválidas tanto de escrita como de leitura, o que era esperado. 

Pelo debugger temos:  

(gdb) display msg 

1: msg = 0x5555555592a0 "Holberton" 

Mesmo com o erro do código Holberton aparenta ter sido atribuído. 

3.  Para consertar o programa vou aumentar de 8 para 10 o espaço e acrescentar um free após o printf. 

4.  Primeiro ponto a ser reparado é que não há mensagens de erro ou warning durante a compilação 

O valgrind retornou: 

==6605== Memcheck, a memory error detector 

==6605== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==6605== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==6605== Command: ./programa_reparado11 

==6605==  

6605, Rolberton 

==6605==  

==6605== HEAP SUMMARY: 

==6605==     in use at exit: 0 bytes in 0 blocks 

==6605==   total heap usage: 2 allocs, 2 frees, 1,034 bytes allocated 

==6605==  

==6605== All heap blocks were freed -- no leaks are possible 

==6605==  

==6605== For lists of detected and suppressed errors, rerun with: -s 

==6605== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

Ou seja, não houve erros de nenhuma natureza. 

Por último o debugger, apresentou o funcionamento perfeito também: 

Breakpoint 1, main () at c11_reparado.c:8 

8               char *msg = malloc(10); 

(gdb) display msg 

1: msg = 0x5555555550c0 <_start> "\363\017\036\372\061\355I\211\321^H\211\342H\203\344\360PTE1\300\061\311H\215", <incomplete sequence \312> 

(gdb) next 

  

Breakpoint 2, main () at c11_reparado.c:9 

9               strcpy(msg, "Holberton"); 

1: msg = 0x5555555592a0 "" 

(gdb) next 

  

Breakpoint 3, main () at c11_reparado.c:10 

10              msg[0] = 'R'; 

1: msg = 0x5555555592a0 "Holberton" 

(gdb) next 

  

Breakpoint 4, main () at c11_reparado.c:11 

11              printf("%ld, %s\n", (long)getpid(), msg); 

1: msg = 0x5555555592a0 "Rolberton" 

(gdb) next 

7420, Rolberton 

  

Breakpoint 5, main () at c11_reparado.c:12 

12              free(msg); 

1: msg = 0x5555555592a0 "Rolberton" 

(gdb) next 

  

Breakpoint 6, main () at c11_reparado.c:13 

13              return (0); 

1: msg = 0x5555555592a0 "YUUU\005" 

(gdb) next 

14      }  