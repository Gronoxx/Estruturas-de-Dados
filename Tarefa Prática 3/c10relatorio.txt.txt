C10.c 

1.  Não possui free para o malloc e o while não possui condição de parada, causando um loop eterno e logo uma alocação de memória “infinita”. 

2.  Analisando a possível situação ded loop infinito com o debugger temos a seguinte saída no terminal: 

93824992252576 

93824992253760 

93824992253904 

93824992254048 

93824992254192 

93824992254336 

93824992254480 

93824992254624 

93824992254768 

93824992254912 

93824992255056 

93824992255200 

93824992255344 

93824992255488 

93824992255632 

93824992255776 

93824992255920 

93824992256064 

93824992256208 

93824992256352 

93824992256496 

93824992256640 

93824992256784 

93824992256928 

93824992257072 

93824992257216 

93824992258944 

Não quis continuar forçando as saídas, mas ficou claro pelos breakpoints que não haveria parada. 

No Debug Console: 

Breakpoint 2, main () at /mnt/d/Tarefa Prática 3/Código Original/c10.c:9  

9	 p = malloc(128);  

Breakpoint 4, main () at /mnt/d/Tarefa Prática 3/Código Original/c10.c:10  

10	 printf("%ld\n", (long)p); 

Se repetia incessantemente. 

Ao tentar rodar o Valgrind não conseguimos gerar relatório nenhum, o código rodava infinitamente. 

3. Portanto, é preciso acrescentar uma condição de parada, optei por um i<3 com i sendo inicializado em 0 e sendo acrescentado em 1 em cada loop. Ademais, coloquei um free dentro do while para não causar vazamento de memória. 

4.  Após isso o valgrind retornou: 

==5294== Memcheck, a memory error detector 

==5294== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==5294== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==5294== Command: ./programa_reparado10 

==5294==  

78168128 

78169408 

78169600 

==5294==  

==5294== HEAP SUMMARY: 

==5294==     in use at exit: 0 bytes in 0 blocks 

==5294==   total heap usage: 4 allocs, 4 frees, 1,408 bytes allocated 

==5294==  

==5294== All heap blocks were freed -- no leaks are possible 

==5294==  

==5294== For lists of detected and suppressed errors, rerun with: -s 

==5294== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

Mostrando que não há nenhum erro. 

O debugger rodou sem problemas e com final. 

Rodando essa mensagem 3 vezes apenas: 

Breakpoint 2, main () at /mnt/d/Tarefa Prática 3/Código Original/c10.c:10  

10 	p = malloc(128);  

Breakpoint 4, main () at /mnt/d/Tarefa Prática 3/Código Original/c10.c:11  

11	 printf("%ld\n", (long)p); 