C1.c 

1.Analisando o código rapidamente é possível observar que o tamanho do malloc era de 10 itens e o for roda um total de 11 vezes, o que vai causar um erro de memória. 

2.Analisando as saídas dos programas temos: 

 
==1852== Memcheck, a memory error detector 

==1852== Memcheck, a memory error detector 

==1852== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==1852== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==1852== Command: ./programa 

==1852==  

==1852== Invalid write of size 4 

==1852==    at 0x1091B8: main (c1.c:9) 

==1852==  Address 0x4a8c068 is 0 bytes after a block of size 40 alloc'd 

==1852==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so) 

==1852==    by 0x109185: main (c1.c:6) 

==1852==  

==1852==  

==1852== HEAP SUMMARY: 

==1852==     in use at exit: 0 bytes in 0 blocks 

==1852==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated 

==1852==  

==1852== All heap blocks were freed -- no leaks are possible 

==1852==  

==1852== For lists of detected and suppressed errors, rerun with: -s 

==1852== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0) 

Observamos que o Valgrind aponta que o programa tentou escrever 4 bytes em uma posição de memória que não foi alocada corretamente. Confirmando a suspeita da tentativa de alocação de um int (4 bytes) a mais do que o informado no tamanho do malloc.  

O gdb não foi tão claro quanto o valgrind para esse problema, mas a contagem da variável i auxiliou na confirmação. ERROR: GDB exited unexpectedly. Debugging will now abort. Essa confirmação não permite que ele explicite o erro igual ao Valgrind. 

 

3.Para corrigir o código vou diminuir o for em uma unidade, evitando essa alocação a mais. 

4.Após diminuir o for recebemos a seguinte mensagem do Valgrind: 

==2933== Memcheck, a memory error detector 

==2933== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==2933== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==2933== Command: ./programa_reparado 

==2933==  

==2933==  

==2933== HEAP SUMMARY: 

==2933==     in use at exit: 0 bytes in 0 blocks 

==2933==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated 

==2933==  

==2933== All heap blocks were freed -- no leaks are possible 

==2933==  

==2933== For lists of detected and suppressed errors, rerun with: -s 

==2933== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

  

Informando que não houve nenhum erro de memória e toda a memória alocada foi desalocada da forma que deveria. 