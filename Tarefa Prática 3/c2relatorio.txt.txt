C2.c 

1.Analisando o código percebemos que o primeiro for aloca apenas 9 (0 até 8) elementos no vetor de tamanho 10. Porém, o erro está na tentativa de leitura da 10 casa do vetor a qual não teve nenhum elemento alocado. 

2.Utilizando as ferramentas para confirmar as suspeitas: 

Não foi possível copiar e colar a resposta do debugger, mas ele mostrou que o vetor teve o comportamento esperado de 0 até 8 alocado perfeitamente e na última posição um lixo que era um número aleatório que estava lá desde o começo. 

Essa foi a saída do programa: 0 1 2 3 4 5 6 7 8 0 

Repare que o 0 foi o número aleatório que já estava lá. 

O valgrind apresentou a seguinte mensagem: 

==3666== Memcheck, a memory error detector 

==3666== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==3666== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==3666== Command: ./programa2 

==3666==  

==3666== Conditional jump or move depends on uninitialised value(s) 

==3666==    at 0x48D7B56: __vfprintf_internal (vfprintf-internal.c:1516) 

==3666==    by 0x48C181E: printf (printf.c:33) 

==3666==    by 0x1091F1: main (c2.c:11) 

==3666==  

==3666== Use of uninitialised value of size 8 

==3666==    at 0x48BB33B: _itoa_word (_itoa.c:177) 

==3666==    by 0x48D6B3D: __vfprintf_internal (vfprintf-internal.c:1516) 

==3666==    by 0x48C181E: printf (printf.c:33) 

==3666==    by 0x1091F1: main (c2.c:11) 

==3666==  

==3666== Conditional jump or move depends on uninitialised value(s) 

==3666==    at 0x48BB34C: _itoa_word (_itoa.c:177) 

==3666==    by 0x48D6B3D: __vfprintf_internal (vfprintf-internal.c:1516) 

==3666==    by 0x48C181E: printf (printf.c:33) 

==3666==    by 0x1091F1: main (c2.c:11) 

==3666==  

==3666== Conditional jump or move depends on uninitialised value(s) 

==3666==    at 0x48D7643: __vfprintf_internal (vfprintf-internal.c:1516) 

==3666==    by 0x48C181E: printf (printf.c:33) 

==3666==    by 0x1091F1: main (c2.c:11) 

==3666==  

==3666== Conditional jump or move depends on uninitialised value(s) 

==3666==    at 0x48D6C85: __vfprintf_internal (vfprintf-internal.c:1516) 

==3666==    by 0x48C181E: printf (printf.c:33) 

==3666==    by 0x1091F1: main (c2.c:11) 

==3666==  

0 1 2 3 4 5 6 7 8 0  

==3666==  

==3666== HEAP SUMMARY: 

==3666==     in use at exit: 0 bytes in 0 blocks 

==3666==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated 

==3666==  

==3666== All heap blocks were freed -- no leaks are possible 

==3666==  

==3666== Use --track-origins=yes to see where uninitialised values come from 

==3666== For lists of detected and suppressed errors, rerun with: -s 

==3666== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)   

Informando que na linha 11 do arquivo tentou-se imprimir um valor não inicializado, causando erro de conditional jump. 

3. Para corrigir esse problema irei aumentar o primeiro for em 1 de tamanho para alocar o vetor inteiro. 

4. 

==4094== Memcheck, a memory error detector 

==4094== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==4094== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==4094== Command: ./programa_reparado2 

==4094==  

0 1 2 3 4 5 6 7 8 9  

==4094==  

==4094== HEAP SUMMARY: 

==4094==     in use at exit: 0 bytes in 0 blocks 

==4094==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated 

==4094==  

==4094== All heap blocks were freed -- no leaks are possible 

==4094==  

==4094== For lists of detected and suppressed errors, rerun with: -s 

==4094== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

A nova mensagem do Valgrind mostra que não há erros e a mensagem de conditional jump sumiu, junto com o aviso de tentativa de leitura de valor não inicializado. 