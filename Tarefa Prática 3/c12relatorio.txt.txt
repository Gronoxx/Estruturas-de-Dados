1.  O erro desse programa é não ter nenhum valor inicializado para a variável x. 

2. 

O valgrind retorna: 

==7584== Memcheck, a memory error detector 

==7584== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==7584== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==7584== Command: ./programa12 

==7584==  

==7584== Conditional jump or move depends on uninitialised value(s) 

==7584==    at 0x109159: main (c12.c:6) 

==7584==  

X is zero==7584==  

==7584== HEAP SUMMARY: 

==7584==     in use at exit: 0 bytes in 0 blocks 

==7584==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated 

==7584==  

==7584== All heap blocks were freed -- no leaks are possible 

==7584==  

==7584== Use --track-origins=yes to see where uninitialised values come from 

==7584== For lists of detected and suppressed errors, rerun with: -s 

==7584== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0) 

Percebemos pela mensagem que não há probelmas com vazamento de memória, entretanto temos: 

==7584== Conditional jump or move depends on uninitialised value(s) 

O que confirma nossa hipótese anterior. 

Pelo debugger temos que: 

(gdb) print x 

$1 = 21845 

Ou seja, o valor de x é aleatório. 

3.  Para corrigir isso irei inicializar o x com 0. 

4. 

Após a correção temos  no valgrind que: 

==8128== Memcheck, a memory error detector 

==8128== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. 

==8128== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info 

==8128== Command: ./programa_reparado12 

==8128==  

X is zero==8128==  

==8128== HEAP SUMMARY: 

==8128==     in use at exit: 0 bytes in 0 blocks 

==8128==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated 

==8128==  

==8128== All heap blocks were freed -- no leaks are possible 

==8128==  

==8128== For lists of detected and suppressed errors, rerun with: -s 

==8128== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 

Ou seja, como x=0 temos a saída “X is zero” e não temos nenhum erro. 

Pelo debugger temos um número válido para x: 

(gdb) print x 

$1 = 0 